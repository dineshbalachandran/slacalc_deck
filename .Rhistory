exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mld
mdl2
mdl2 <- glm(vists ~ date, "poisson")
mdl2 <- glm(visits ~ date, "poisson", hits)
mdl2 <- glm(visits ~ date, "poisson", hits, offset=log(visits + 1))
mdl2 <- glm(simplystats ~ date, "poisson", hits, offset=log(visits + 1))
summary(mdl2)
qpois(.95, mdl2$fitted.values[704])
quit()
?shuttle
library(MASS)
?shuttle
head(shuttle)
fit <- glm(use ~ wind, shuttle, family="binomial")
summary(fit)
exp(-0.03181)
1/.096
1/.96
1/.9686906
1/exp(-0.03181)
fit1 <- glm(use ~ wind + magn, shuttle, family="binomial")
summary(fit1)
summary(fit1)$coeff
summary(fit1)$coeff[2,1]
exp(summary(fit1)$coeff[2,1])
?InsectSprays
fitIns <- glm(count ~ sprays, InsectSprays, family="poisson")
fitIns <- glm(count ~ spray, InsectSprays, family="poisson")
summary(fitIns)
2.67/.2.72
2.67/2.72
fitIns <- glm(count ~ spray - 1, InsectSprays, family="poisson")
summary(fitIns)
summary(fitIns)$coeff[1,1]/summary(fitIns)$coeff[2,1]
summary(fitIns)$coeff[1,1]
summary(fitIns)$coeff[2,1]
exp(summary(fitIns)$coeff[1,1])/exp(summary(fitIns)$coeff[2,1])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
knots <- seq(0,8*pi, length=20)
splineTerms <- sapply(knots, function(knot) (x1 > knot) * (x1-knot))
x1 <- ses(0, 4*pi, length=500)
x1 <- seq(0, 4*pi, length=500)
splineTerms <- sapply(knots, function(knot) (x1 > knot) * (x1-knot))
splineTerms
head(splineTerms)
head(x1)
x1
head(x1)
x
x0 <- c(0,0,0,0,0,0,1,2,3,4,5)
xmat <- cbind(1, x, x0)
fitk <- lm(y ~ xmat - 1)
summary(fitk)
summary(fitIns)
exp(2.67)/exp(2.73)
plot(y ~ x)
yhat <- predict(y ~ x - 1)
yhat <- predict(lm(y ~ x - 1)
)
lines(x, yhat)
yhat <- predict(lm(y ~ xmat - 1)
)
lines(x, yhat)
fitIns10 <- glm(count ~ spray - 1 + offset(10), InsectSprays, family="poisson")
fitIns10 <- glm(count ~ spray + offset(spray+10) - 1, InsectSprays, family="poisson")
fitIns10 <- glm(count ~ spray + offset(1) - 1, InsectSprays, family="poisson")
fitIns10 <- glm(count ~ spray + offset(24) - 1, InsectSprays, family="poisson")
fitIns10 <- glm(count ~ spray - 1, InsectSprays, offset=log(10), family="poisson")
fitIns10 <- glm(count ~ spray - 1, InsectSprays, offset=log(spray+1), family="poisson")
fitIns10 <- glm(count ~ spray - 1, InsectSprays, offset=log(count+1), family="poisson")
fitIns10
fitIns
log(10)
log(1)
fitIns10 <- glm(count ~ spray - 1, InsectSprays, offset=log(count+10), family="poisson")
fitIns10
fintIns
fitIns
log(10)
fitIns10 <- glm(count ~ spray - 1, InsectSprays, offset=log(10), family="poisson")
fitIns10 <- glm(count ~ spray +offset(10) - 1, InsectSprays, family="poisson")
summary(fitk)
2.037-1.02
2.03723-1.02416
install_package("caret")
install.package("caret")
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData <- data.frame(predictors)
trainIndex <- createDataPartition(diagnosis, p=0.5, list=FALSE)
training <- adData[trainIndex,]
test <- adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
hist(Superplasticizer, training)
hist(Superplasticizer, data=training)
hist(Superplasticizer, data=training)
?hist
hist(training$Superplasticizer)
training$logSPC <- log10(training$Superplasticizer)
hist(training$logSPC)
training$logSPC <- log10(training$Superplasticizer + 1)
hist(training$logSPC)
training$logSPC <- log10(training$Superplasticizer)
hist(training$logSPC)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
trainIL <- matchcols(training, with=c("^IL"))
library(gdata)
install.package("gdata")
install.packages("gdata")
library(gdata)
trainIL <- matchcols(training, with=c("^IL"))
trainPca <- preProcess(trainIL, method="pca", thresh=0.8)
summary(trainIL)
trainIL <- training(,matchcols(training, with=c("^IL")))
trainIL <- training[,matchcols(training, with=c("^IL"))]
trainPca <- preProcess(trainIL, method="pca", thresh=0.8)
summary(trainPca)
trainPca <- train(trainIL, preProcess=(method="pca", thresh=0.8))
trainPca <- train(trainIL, preProcess="(method="pca", thresh=0.8)")
preP <- train(trainIL, preProcess="(method="pca", thresh=0.8)")
preP <- preProcess(trainIL, method="pca", thresh=0.8)
str(preP)
preP <- preProcess(trainIL, method="pca", thresh=0.8)
trainPC <- predict(preP, trainIL)
summary(trainPC)
trainIL <- training[,matchcols(training, with=c("^IL", "diagnosis"))]
trainIL <- training[,matchcols(training, with=c("^IL", "diagnosis"), method="or")]
trainIL <- training[,matchcols(training, with=c("^IL", "diagnosis"), method=c("or"))]
trainIL <- training[,matchcols(training, with=c("^IL", "diagnosis"))]
trainIL <- training[,matchcols(training, with=c("^IL"))]
trainIL <- training[,matchcols(training, with=c("^IL", "diagnosis"))]
trainIL <- training[,matchcols(training, with=c("diagnosis", ^IL"))]
trainIL <- training[,matchcols(training, with=c("diagnosis", "^IL"))]
trainIL <- training[,matchcols(training, with=c("diagnosis", "^IL"), method=c("or"))]
trainIL <- training[,matchcols(training, with=c("diagnosis", "^IL"), method="or")]
trainIL <- training[,matchcols(training, with=c("diagnosis", "^IL"), method="and")]
trainIL <- training[,matchcols(training, with=c("diagnosis", "^IL"), method="or")]
trainIL <- matchcols(training, with=c("diagnosis", "^IL"), method="or")
trainsubs <- training[,trainIL]
trainIL <- matchcols(training, with=c("^IL"), method="or")
trainsubs <- training[,grep("^IL" | "diagnosis")]
trainIL <- matchcols(training, with=c("^IL", "diagnosis"))
trainIL <- matchcols(training, with=c("^IL", "diagnosis"), method="or")
trailIL <- c(trainIL)
trainIL <- trailIL[1] + trailIL[2]
trainIL <- c(trailIL[1],  trailIL[2])
trainIL <- c(trailIL[[1]],  trailIL[[2]])
trainsubs <- training[,trainIL]
model1 <- train(diagnosis ~ ., method="glm", data=trainsubs)
install.package("e1071", dependencies=TRUE)
install.packages("e1071", dependencies=TRUE)
model1 <- train(diagnosis ~ ., method="glm", data=trainsubs)
preP <- preProcess(trainsubs[,-13], method="pca", thresh=0.8)
trainPC <- predict(preP, trainsubs[,-13])
model2 <- train(trainsubs$diagnosis ~ ., method="glm", data="trainPC")
model2 <- train(trainsubs$diagnosis ~ ., method="glm", data=trainPC)
testIL <- matchcols(testing, with=c("^IL", "diagnosis"), method="or")
testIL <- c(testIL[[1]],  testIL[[2]])
testsubs <- test[,testIL]
testsubs <- testing[,testIL]
test1 <- predict(model1, testsubs)
summary(test1)
confusionMatrix(testing$type, test1)
confusionMatrix(testing$diagnosis, test1)
test2Pc <- predict(preP, testsubs)
test2Pc <- predict(preP, testsubs[-13])
confusionMatrix(testing$type, test2Pc)
confusionMatrix(testing$diagnosis, test2Pc)
confusionMatrix(testing$diagnosis, predict(model2, test2Pc))
prep1 <- preProcess(trainsubs[,-13], method="pca", thresh=0.9)
train1 <- predict(prep1, trainsubs)
train1 <- predict(prep1, trainsubs[,-13])
summary(mixtures$Superplasticizer)
log(0)
log(0) + 1
hist(mixtures$Superplasticizer)
hist(log10(mixtures$Superplasticizer))
hist(log10(mixtures$Superplasticizer), type=density)
density(log10(mixtures$Superplasticizer))
quit()
library(forecast)
uninstall.packages("forecast")
install.packages("forecast")
install.packages("forecast")
library(forecast)
ver
?ver
version
p <- c(.1,.2,.3,.4)
x <- 2:5
sum(x^2*p) - sum(x*p)^2
pbeta(0.75,2,1)
qbeta(0.75,2,1)
qbeta(0.5,2,1)
install.packages("shiny")
incidents <- data.frame(id=1:2,
raised_date=as.Date(c("10/11/2016", "10/11/2017"),
"%d/%m/%Y"),
response_date=as.Date(c("10/12/2016", "10/12/2017"),
"%d/%m/%Y"))
incidents$age <- incidents$response_date - incidents$raised_date
incidents$slaStatus <- incidents$age > input$responseSLA ? "N" : "Y"
if (incidents$age > input$responseSLA) {incidents$slaStatus <- "N"} else {incident$slaStatus <- "Y"}
incidents$slaStatus <- incidents$age > 2 ? "N" : "Y"
if (incidents$age > 2) {incidents$slaStatus <- "N"} else {incident$slaStatus <- "Y"}
incidents$slaStatus[incidents$age>2] <- "N"
shiny::runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
?table
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
?barplot
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
?text
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
requests <- data.frame(
raised_date=as.Date(c("12/10/2015",
"12/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"14/10/2015",
"15/10/2015",
"15/10/2015",
"16/10/2015",
"16/10/2015",
"19/10/2015",
"20/10/2015",
"20/10/2015",
"20/10/2015"),
"%d/%m/%Y"),
response_date=as.Date(c("14/10/2015",
"12/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"14/10/2015",
"15/10/2015",
"15/10/2015",
"19/10/2015",
"16/10/2015",
"19/10/2015",
"20/10/2015",
"20/10/2015",
"20/10/2015"),
"%d/%m/%Y"))
requests$age <- requests$response_date - requests$raised_date
requests$slaMet <- "Y"
requests$slaMet[requests$age > input$responseSLA] <- "N"
requests$slaMet <- "Y"
requests$slaMet[requests$age > 2] <- "N"
sla <- table(requests$slaMet)
requests$slaMet <- "Y"
requests$slaMet[requests$age > 3] <- "N"
sla <- table(requests$slaMet)
sla <- sla - 1
requests$slaMet[requests$age > 2] <- "N"
sla <- table(requests$slaMet)
sla <- sla - 1
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
?rbind
requests$slaMet
slaMet <- requests$slaMet
rbind(slaMet, c("Y"))
cbind(slaMet, c("Y"))
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
runApp('slaCalc')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dineshkb', token='4512E74F32DBF0DBAB89CBD0AE671BCE', secret='oCha0aC2oaQPuzTWXGJIS2fdjQ4k8bfJ0Ht0ud9t')
library(rsconnect)
rsconnect::deployApp(slaCalc)
rsconnect::deployApp('slaCalc')
library(devtools)
install.packages('devtools')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/slaCalc")
author("slaCalc_deck")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
, class='shiny-html-output nvd3 rChart'
tags$div(id='distPlot', class='shiny-html-output nvd3 rChart')
# Chunk 1
slidifyUI(
sidebarPanel(
sliderInput("responseSLA",
"Set SLA days",
min = 1,
max = 5,
value = 2)
),
# Show a plot of the generated distribution
mainPanel(
tags$div(id='distPlot', class='shiny-html-output nvd3 rChart')
)
)
runDeck()
runDeck()
runDeck()
library(XML)
install.packages('XML')
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
?selectInput
runDeck()
?slidifyUI
library(slidifyLibraries)
?slidifyUI
library(slidify)
?slidifyUI
library(rCharts)
install.packages('rCharts')
install_github("ramnathv/rCharts")
library(rCharts)
install_github("ramnathv/rCharts")
install.packages('RCurl')
install.packages('RCpp')
install.packages('Rcpp')
install.packages('Rcpp')
install.packages("Rcpp")
install.packages('RCurl')
install_github("ramnathv/rCharts")
library(devtools)
install.packages('devtools')
library(devtools)
install_github("ramnathv/rCharts")
requests <- data.frame(
raised_date=as.Date(c("12/10/2015",
"12/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"14/10/2015",
"15/10/2015",
"15/10/2015",
"16/10/2015",
"16/10/2015",
"19/10/2015",
"20/10/2015",
"20/10/2015",
"20/10/2015"),
"%d/%m/%Y"),
response_date=as.Date(c("14/10/2015",
"12/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"13/10/2015",
"14/10/2015",
"15/10/2015",
"15/10/2015",
"19/10/2015",
"16/10/2015",
"19/10/2015",
"20/10/2015",
"20/10/2015",
"20/10/2015"),
"%d/%m/%Y"))
requests$age <- requests$response_date - requests$raised_date
requests$slaMet <- "Within SLA"
requests$slaMet[requests$age > input$responseSLA] <- "Outside SLA"
slaMet <- requests$slaMet
requests$slaMet[requests$age > 2] <- "Outside SLA"
slaMet <- requests$slaMet
slaMet <- c(slaMet, "Within SLA", "Outside SLA")
sla <- table(slaMet)
?table
sla[1]
sla[2]
sla[[2][]
sla[[2]]
library(slidify)
runDeck()
library(slidifyLibraries)
runDeck()
slidify('index.Rmd')
library(shiny)
install.packages('shiny')
slidify('index.Rmd')
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runDeck()
runApp('~/slaCalc')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
runDeck()
runDeck()
slidify('index.Rmd')
slidify('index.Rmd')
runDeck()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish(user = "dineshbalachandran", repo = "slacalc_deck")
publish(user = "dineshbalachandran", repo = "slacalc_deck")
publish(user = "dineshbalachandran", repo = "slacalc_deck")
publish(title='Data product assignment', 'index.html', host='rpubs')
git checkout --orphan gh-pages
git
git checkout
publish(user = "dineshbalachandran", repo = "slacalc_deck")
publish(user = "dineshbalachandran", repo = "slacalc_deck")
exit
quit
quit()
